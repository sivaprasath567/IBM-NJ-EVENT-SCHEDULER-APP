Implementation
The implementation phase converts the planned design into an operational
system. Below are the key modules and their functionalities.
1. Authentication Module
// login.js – Node.js backend route
App.post(“/login”, async (req, res) => {
Const user = await User.findOne({ email: req.body.email });
If (!user) return res.status(400).send(“User not found”);
Const validPass = await bcrypt.compare(req.body.password,
user.password);
If (!validPass) return res.status(400).send(“Invalid password”);
Const token = jwt.sign({ _id: user._id }, process.env.TOKEN_SECRET);
Res.header(“auth-token”, token).send({ message: “Login successful”,
token });
});
This code demonstrates how a user’s credentials are validated and a secure
token is generated for session management.
2. Event Creation Module
// eventController.js
App.post(“/createEvent”, async (req, res) => {
Const newEvent = new Event({
Title: req.body.title,
Date: req.body.date,
Time: req.body.time,
Description: req.body.description,
});
Await newEvent.save();
Res.send(“Event Created Successfully”);
});
This allows the admin to create a new event entry that is stored in MongoDB
and displayed on the dashboard in real time.
3. Reminder Module
// reminder.js – using Nodemailer
Const transporter = nodemailer.createTransport({
Service: “gmail”,
Auth: {
User: eventschedulerapp@gmail.com,
Pass: “yourpassword”,
},
});
Const mailOptions = {
From: eventschedulerapp@gmail.com,
To: user.email,
Subject: “Event Reminder”,
Text: `Hi ${user.name}, don’t forget your event: ${event.title} on
${event.date}!`,
};
Transporter.sendMail(mailOptions, (error, info) => {
If (error) console.log(error);
Else console.log(“Email sent: “ + info.response);
});
This script automates the sending of reminders to participants based on event
dates.
Testing & Results
Extensive testing was performed to ensure each module works as expected.
The following test cases were included:
Login and registration validation
Event creation and modification
Calendar view rendering
Email reminder functionality
Report generation accuracy
All tests passed successfully with no critical errors. The system performance
was optimized to load within 2 seconds per page, and the database handled
concurrent users efficiently.
Results & Analysis
The deployed system performed well during the live demo. Admin users
could manage events seamlessly, while regular users experienced smooth
navigation and reliable notifications. Analytical charts accurately displayed
participation trends and event statistics. The responsive design ensured
compatibility across devices, and deployment on cloud platforms guaranteed
uptime and scalability.
Conclusion
The Event Scheduler Application successfully achieved its objectives by
providing a complete digital event management solution. It automates key
processes such as event creation, scheduling, and reminders while offering
valuable insights through reports. The project demonstrates the power of
modern web technologies in improving productivity and communication. It
is suitable for educational institutions, corporate organizations, and personal
use.
Future Scope
Future enhancements may include:
Integration of SMS reminders in addition to email notifications.
Mobile application version for Android and iOS.
Role-based access control for multiple admin hierarchies.
AI-based recommendation system for scheduling optimal event times.
Integration with third-party calendars such as Google Calendar or Outlook.
